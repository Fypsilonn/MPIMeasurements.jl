export RobotBasedMagneticFieldStaticProtocolParams, RobotBasedMagneticFieldStaticProtocol, measurement, filename

Base.@kwdef struct RobotBasedMagneticFieldStaticProtocolParams <: RobotBasedProtocolParams
  positions::Union{Positions, Missing} = missing
  postMoveWaitTime::typeof(1.0u"s") = 0.5u"s"
  numCooldowns::Integer = 0
  robotVelocity::typeof(1.0u"m/s") = 0.01u"m/s"
  switchBrakes::Bool = false
end
RobotBasedMagneticFieldStaticProtocolParams(dict::Dict) = createRobotBasedProtocolParams(RobotBasedMagneticFieldStaticProtocolParams, dict)

Base.@kwdef mutable struct RobotBasedMagneticFieldStaticProtocol <: RobotBasedProtocol
  name::AbstractString
  description::AbstractString
  scanner::MPIScanner
  params::RobotBasedMagneticFieldStaticProtocolParams
  
  measurement::Union{MagneticFieldMeasurement, Missing} = missing
  filename::Union{AbstractString, Missing} = missing
end

measurement(protocol::RobotBasedMagneticFieldStaticProtocol) = protocol.measurement
measurement(protocol::RobotBasedMagneticFieldStaticProtocol, measurement::Union{MagneticFieldMeasurement, Missing}) = protocol.measurement = measurement
filename(protocol::RobotBasedMagneticFieldStaticProtocol) = protocol.filename
filename(protocol::RobotBasedMagneticFieldStaticProtocol, filename::String) = protocol.filename = filename

function init(protocol::RobotBasedMagneticFieldStaticProtocol)
  measurement_ = MagneticFieldMeasurement()
  MPIFiles.description(measurement_, "Generated by protocol $(name(protocol)) with the following description: $(description(protocol))")
  MPIFiles.positions(measurement_, positions(protocol))
  measurement(protocol, measurement_)
end

function preMoveAction(protocol::RobotBasedMagneticFieldStaticProtocol, pos::Vector{<:Unitful.Length})
  @info "moving to position" pos
end

function postMoveAction(protocol::RobotBasedMagneticFieldStaticProtocol, pos::Vector{<:Unitful.Length})
  gaussmeter = getGaussMeter(scanner(protocol))
  field_ = getXYZValues(gaussmeter)
  fieldError_ = calculateFieldError(gaussmeter, field_)
  fieldFrequency_ = getFrequency(gaussmeter)
  timestamp_ = now()
  temperature_ = getTemperature(gaussmeter)

  addMeasuredPosition(measurement(protocol), pos, field=field_, fieldError=fieldError_, fieldFrequency=fieldFrequency_, timestamp=timestamp_, temperature=temperature_)
end

function cleanup(protocol::RobotBasedMagneticFieldStaticProtocol)
  saveMagneticFieldAsHDF5(measurement(protocol), filename(protocol))
  close(protocol.scanner)
end